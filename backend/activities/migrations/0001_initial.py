# Generated by Django 5.2.4 on 2025-10-04 08:34

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("accounts", "0003_alter_account_name"),
        ("contacts", "0001_initial"),
        ("contracts", "0002_alter_contract_status"),
        ("invoices", "0003_alter_invoice_status"),
        ("leads", "0001_initial"),
        ("opportunities", "0004_opportunitylineitem_is_active_and_more"),
        ("orders", "0002_alter_order_status"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Activity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[("Task", "Task"), ("Event", "Event")],
                        help_text="Type of activity: Task or Event.",
                        max_length=10,
                    ),
                ),
                (
                    "subject",
                    models.CharField(
                        help_text="The subject of the task or event.", max_length=255
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Detailed description of the activity.",
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Not Started", "Not Started"),
                            ("In Progress", "In Progress"),
                            ("Completed", "Completed"),
                            ("Waiting on someone else", "Waiting on someone else"),
                            ("Deferred", "Deferred"),
                        ],
                        help_text="Status of the task.",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("High", "High"),
                            ("Normal", "Normal"),
                            ("Low", "Low"),
                        ],
                        help_text="Priority of the task.",
                        max_length=10,
                        null=True,
                    ),
                ),
                (
                    "due_date",
                    models.DateField(
                        blank=True, help_text="Due date for tasks.", null=True
                    ),
                ),
                (
                    "start_time",
                    models.DateTimeField(
                        blank=True, help_text="Start time for events.", null=True
                    ),
                ),
                (
                    "end_time",
                    models.DateTimeField(
                        blank=True, help_text="End time for events.", null=True
                    ),
                ),
                (
                    "is_all_day_event",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if the event is an all-day event.",
                    ),
                ),
                (
                    "location",
                    models.CharField(
                        blank=True,
                        help_text="Location of the event.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "version",
                    models.IntegerField(
                        default=1, help_text="Version number for optimistic locking."
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "account",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="activities",
                        to="accounts.account",
                    ),
                ),
                (
                    "assigned_to",
                    models.ForeignKey(
                        help_text="User to whom the activity is assigned.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="activities",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "attendees",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Users attending this event (for Events only).",
                        related_name="attending_activities",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "contact",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="activities",
                        to="contacts.contact",
                    ),
                ),
                (
                    "contract",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="activities",
                        to="contracts.contract",
                    ),
                ),
                (
                    "invoice",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="activities",
                        to="invoices.invoice",
                    ),
                ),
                (
                    "lead",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="activities",
                        to="leads.lead",
                    ),
                ),
                (
                    "opportunity",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="activities",
                        to="opportunities.opportunity",
                    ),
                ),
                (
                    "order",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="activities",
                        to="orders.order",
                    ),
                ),
            ],
            options={
                "verbose_name": "Activity",
                "verbose_name_plural": "Activities",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["assigned_to", "due_date"],
                        name="activities__assigne_13123b_idx",
                    ),
                    models.Index(
                        fields=["account"], name="activities__account_8cdda8_idx"
                    ),
                    models.Index(
                        fields=["opportunity"], name="activities__opportu_1c2c9f_idx"
                    ),
                    models.Index(
                        fields=["contract"], name="activities__contrac_077aad_idx"
                    ),
                    models.Index(
                        fields=["order"], name="activities__order_i_7bec74_idx"
                    ),
                    models.Index(
                        fields=["invoice"], name="activities__invoice_ecd10e_idx"
                    ),
                    models.Index(
                        fields=["contact"], name="activities__contact_9b9b6b_idx"
                    ),
                    models.Index(
                        fields=["lead"], name="activities__lead_id_48f544_idx"
                    ),
                ],
                "constraints": [
                    models.CheckConstraint(
                        condition=models.Q(
                            models.Q(
                                ("account__isnull", True),
                                ("contract__isnull", True),
                                ("invoice__isnull", True),
                                ("opportunity__isnull", True),
                                ("order__isnull", True),
                            ),
                            models.Q(
                                ("account__isnull", False),
                                ("contract__isnull", True),
                                ("invoice__isnull", True),
                                ("opportunity__isnull", True),
                                ("order__isnull", True),
                            ),
                            models.Q(
                                ("account__isnull", True),
                                ("contract__isnull", True),
                                ("invoice__isnull", True),
                                ("opportunity__isnull", False),
                                ("order__isnull", True),
                            ),
                            models.Q(
                                ("account__isnull", True),
                                ("contract__isnull", False),
                                ("invoice__isnull", True),
                                ("opportunity__isnull", True),
                                ("order__isnull", True),
                            ),
                            models.Q(
                                ("account__isnull", True),
                                ("contract__isnull", True),
                                ("invoice__isnull", True),
                                ("opportunity__isnull", True),
                                ("order__isnull", False),
                            ),
                            models.Q(
                                ("account__isnull", True),
                                ("contract__isnull", True),
                                ("invoice__isnull", False),
                                ("opportunity__isnull", True),
                                ("order__isnull", True),
                            ),
                            _connector="OR",
                        ),
                        name="only_one_what_fk",
                    ),
                    models.CheckConstraint(
                        condition=models.Q(
                            models.Q(("contact__isnull", True), ("lead__isnull", True)),
                            models.Q(
                                ("contact__isnull", False), ("lead__isnull", True)
                            ),
                            models.Q(
                                ("contact__isnull", True), ("lead__isnull", False)
                            ),
                            _connector="OR",
                        ),
                        name="only_one_who_fk",
                    ),
                ],
            },
        ),
    ]
